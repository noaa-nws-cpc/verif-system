<!-- Chart.dtd - the main consolidating dtd for JClass Chart -->

<!-- Note: All Font attributes are specified in the format "name-style-size"
           where style is one of plain, italic, bold, bolditalic,
		   e.g. "Helvetica-plain-10"
           All Color attribues can be specified by one of the following:
		       - a color enum ("black", "pink", etc.)
			   - a hex value in format "#RRGGBB", "#RRRRGGGGBBBB" or "#N"
			   - rgb values in format "r-g-b"
           All angles are assumed to be specified using degrees. -->

<!ENTITY % jcchart-data SYSTEM "JCChartData.dtd">

<!-- The main chart element.  The properties and sub-elements by and large
     coincide with the properties and sub-objects of the corresponding object
	 within the chart component. -->
<!ELEMENT chart (component?,
                 image-map-info?,
                 locale?,
                 event-trigger*,
                 key*,
                 header?,
                 footer?,
                 legend?,
                 chart-area?,
                 chart-data-view*,
                 chart-label*,
                 data-image-map-list?,
                 legend-image-map?,
                 external-java-code*
                 )>

     <!ATTLIST chart allowUserChanges (True|true|TRUE|False|false|FALSE) #IMPLIED
	                 name CDATA #IMPLIED
	                 width CDATA #IMPLIED
					 height CDATA #IMPLIED
                     antiAliasing (Default|On|Off) "Default">

<!-- Read in the data dtd -->
%jcchart-data;

<!-- Element which contains locale properties for the chart.
     Values for the attributes are the same as the corresponding
     attributes in the java.util.Locale class.  -->
<!ELEMENT locale EMPTY>

     <!ATTLIST locale language CDATA #REQUIRED
                      country CDATA #IMPLIED
                      variant CDATA #IMPLIED>

<!-- Element which contains component properties. This element is a
     sub-element of those elements which represent components. -->
<!ELEMENT component ((empty-border|bevel-border|etched-border|line-border|
                      matte-border|titled-border|compound-border)?)>

     <!ATTLIST component background CDATA #IMPLIED
                         foreground CDATA #IMPLIED
                         opaque (True|true|TRUE|False|false|FALSE) #IMPLIED
                         font CDATA #IMPLIED
                         visible (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- Empty border -->
<!ELEMENT empty-border (insets)>

<!-- Bevel or SoftBevel border -->
<!ELEMENT bevel-border EMPTY>

     <!ATTLIST bevel-border soft (True|true|TRUE|False|false|FALSE) "false"
	                        type (Raised|Lowered) #IMPLIED
	                        highlightColor CDATA #IMPLIED
							shadowColor CDATA #IMPLIED>

<!-- Etched border -->
<!ELEMENT etched-border EMPTY>

     <!ATTLIST etched-border type (Raised|Lowered) #IMPLIED
	                         highlightColor CDATA #IMPLIED
							 shadowColor CDATA #IMPLIED>

<!-- Line Border -->
<!ELEMENT line-border EMPTY>

     <!ATTLIST line-border color CDATA #REQUIRED
	                       thickness CDATA #IMPLIED
						   roundedCorners (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- Matte Border -->
<!ELEMENT matte-border (insets)>

     <!ATTLIST matte-border color CDATA #REQUIRED>

<!-- A Titled Border.  Sub-borders cannot be another titled border or a
     compound border. -->
<!ELEMENT titled-border ((empty-border|bevel-border|etched-border|line-border|matte-border)?)>

     <!ATTLIST titled-border title CDATA #REQUIRED
	                         titlePosition (Default|Above_Top|Top|Below_Top|
							                Above_Bottom|Bottom|Below_Bottom) "Default"
							 titleJustification (Default|Left|Center|Right|Leading|Trailing) "Default"
							 font CDATA #IMPLIED
							 color CDATA #IMPLIED>

<!-- Compound Border.  Outside border, then inside border. Note that sub-borders
     can also be compound. -->
<!ELEMENT compound-border ((empty-border|bevel-border|etched-border|line-border|
                            matte-border|titled-border|compound-border),
                           (empty-border|bevel-border|etched-border|line-border|
                            matte-border|titled-border|compound-border))>

<!-- A rectangle that specifies where and at what size sub-components of chart
     such as the header, footer, legend, and chart area are drawn.  The chart
	 calculates default layout rectangles for each sub-component.  Supplying
	 layout hints allows the user to override some or all of the default values.
	 If some attributes are not specified, they will be set to their default
	 values. -->
<!ELEMENT layout-hints EMPTY>

     <!ATTLIST layout-hints x CDATA #IMPLIED
                            y CDATA #IMPLIED
                            width CDATA #IMPLIED
                            height CDATA #IMPLIED>

<!-- Event triggers are used to assign predefined chart actions such as
     rotate the chart or popup the customizer to mouse events -->
<!ELEMENT event-trigger EMPTY>

     <!ATTLIST event-trigger trigger (Rotate|Zoom|Translate|Edit|Pick|Pick_Series|Depth|Customize) "Customize"
                             modifier (None|Ctrl|Shift|Alt|Meta) "None">

<!-- Key elements allow a key to be bound to reset or cancel actions -->
<!ELEMENT key EMPTY>

     <!ATTLIST key type (ResetKey|CancelKey) "ResetKey"
                   keyValue CDATA #IMPLIED>

<!-- The component used as the header for the chart (a JLabel) -->
<!ELEMENT header (component?,layout-hints?,image-map-info?)>

     <!ATTLIST header text CDATA #IMPLIED
                      horizontalAlignment (Left|Center|Right|Leading|Trailing) "Leading"
                      verticalAlignment (Top|Center|Bottom) "Center">

<!-- The component used as the footer for the chart (a JLabel) -->
<!ELEMENT footer (component?,layout-hints?,image-map-info?)>

     <!ATTLIST footer text CDATA #IMPLIED
                      horizontalAlignment (Left|Center|Right|Leading|Trailing) "Leading"
                      verticalAlignment (Top|Center|Bottom) "Center">

<!-- JCLegend.  This is the component within the chart in which the legend is
     drawn. -->
<!ELEMENT legend (component?,layout-hints?,legend-column*,image-map-info?,multi-col?)>

     <!ATTLIST legend type (Grid|MultiCol) #IMPLIED
                      anchor (North|Northeast|Northwest|East|West|
                              South|Southeast|Southwest) #IMPLIED
                      orientation (Horizontal|Vertical) #IMPLIED
                      itemTextToolTipEnabled (True|true|TRUE|False|false|FALSE) #IMPLIED
                      useEllipsisWhenTruncating (True|true|TRUE|False|false|FALSE) #IMPLIED
                      symbolRenderMode (Fixed|Actual) #IMPLIED>

<!-- Attributes for a legend column.  If the column attribute is missing, the
     attribute values are applied to all columns. -->
<!ELEMENT legend-column EMPTY>

     <!ATTLIST legend-column column CDATA #IMPLIED
                             maxItemTextWidth CDATA #IMPLIED
                             itemTextAlignment (Left|Center|Right|Leading|Trailing) "Leading"
                             truncateMode (Left|Right|Middle|End|Leading|Trailing) "Trailing">

<!-- MultiCol attributes for use when legend type is MultiCol -->
<!ELEMENT multi-col EMPTY>

     <!ATTLIST multi-col numRows CDATA #IMPLIED
                         numColumns CDATA #IMPLIED>

<!-- JCChartArea.  This is the component within the chart in which the actual
     chart is drawn.  Note that the horizActionAxis and vertActionAxis
	 properties must match an axis name within the axis list or they will
	 default to the primary x or y axis. -->
<!ELEMENT chart-area (component?,layout-hints?,image-map-info?,plot-area?,axis*)>

     <!ATTLIST chart-area axisBoundingBox (True|true|TRUE|False|false|FALSE) #IMPLIED
                          depth CDATA #IMPLIED
                          elevation CDATA #IMPLIED
                          rotation CDATA #IMPLIED
                          angleUnit (Degrees|Radians|Grads) #IMPLIED
                          fastAction (True|true|TRUE|False|false|FALSE) #IMPLIED
                          horizActionAxis CDATA #IMPLIED
                          vertActionAxis CDATA #IMPLIED>

<!-- JCPlotArea. The rectangle within the chart area into which the data
     is drawn. -->
<!ELEMENT plot-area (image-map-info?)>

     <!ATTLIST plot-area background CDATA #IMPLIED
                         foreground CDATA #IMPLIED
                         left CDATA #IMPLIED
                         right CDATA #IMPLIED
                         top CDATA #IMPLIED
                         bottom CDATA #IMPLIED>

<!-- JCAxis.  Has attributes that deal with drawing of X or Y axes.  The
     placementAxis name needs to match an axis of the opposite type (i.e.
	 for an x-axis the placementAxis needs to match a y-axis name).  If no
	 match, occurs the default "xaxis" or "yaxis" is assumed. -->
<!ELEMENT axis (chart-interior-region?,axis-title?,axis-formula?,value-label*,
                grid*,anno*,line-style?)>

     <!ATTLIST axis type (XAxis|YAxis) "XAxis"
	                name CDATA #REQUIRED
                    vertical (True|true|TRUE|False|false|FALSE) #IMPLIED
                    logarithmic (True|true|TRUE|False|false|FALSE) #IMPLIED
                    reversed (True|true|TRUE|False|false|FALSE) #IMPLIED
                    editable (True|true|TRUE|False|false|FALSE) #IMPLIED
                    dropOverlappingLabels (True|true|TRUE|False|false|FALSE) #IMPLIED
                    annotationRotation (None|Rotate_90|Rotate_180|Rotate_270|Rotate_Other) #IMPLIED
                    annotationRotationAngle CDATA #IMPLIED
                    annotationMethod (Value|Value_Labels|Point_Labels|Time_Labels) #IMPLIED
                    annotationVisible (True|true|TRUE|False|false|FALSE) #IMPLIED
                    placement (Automatic|Origin|Min|Max|Value_Anchored) #IMPLIED
                    placementAxis CDATA #IMPLIED
                    placementLocation CDATA #IMPLIED
                    gap CDATA #IMPLIED
                    timeBase CDATA #IMPLIED
                    timeUnit (Seconds|Minutes|Hours|Days|Weeks|Months|Years) #IMPLIED
                    timeFormat CDATA #IMPLIED
                    timeZone CDATA #IMPLIED
                    min CDATA #IMPLIED
                    max CDATA #IMPLIED
                    precision CDATA #IMPLIED
                    tickSpacing CDATA #IMPLIED
                    numSpacing CDATA #IMPLIED
                    origin CDATA #IMPLIED
                    originPlacement (Automatic|Zero|Min|Max) #IMPLIED
                    gridVisible (True|true|TRUE|False|false|FALSE) #IMPLIED
                    gridDefault (True|true|TRUE|False|false|FALSE) #IMPLIED
                    gridSpacing CDATA #IMPLIED
                    useDefaultLabels (True|true|TRUE|False|false|FALSE) #IMPLIED
                    useDefaultTicks (True|true|TRUE|False|false|FALSE) #IMPLIED
                    useAnnoTicks (True|true|TRUE|False|false|FALSE) #IMPLIED
                    useDefaultGrid (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- A rectangular region for drawing within chart that is not a component -->
<!ELEMENT chart-interior-region (insets?)>

     <!ATTLIST chart-interior-region background CDATA #IMPLIED
                                     foreground CDATA #IMPLIED
                                     font CDATA #IMPLIED
                                     groupingUsed (True|true|TRUE|False|false|FALSE) #IMPLIED
                                     numberLocalization (True|true|TRUE|False|false|FALSE) #IMPLIED
                                     visible (True|true|TRUE|False|false|FALSE) #IMPLIED
									 left CDATA #IMPLIED
                                     width CDATA #IMPLIED
                                     top CDATA #IMPLIED
                                     height CDATA #IMPLIED>

<!-- Insets - a representation of the borders of a container-->
<!ELEMENT insets EMPTY>

     <!ATTLIST insets left CDATA #IMPLIED
                      right CDATA #IMPLIED
                      top CDATA #IMPLIED
                      bottom CDATA #IMPLIED>

<!-- JCAxisTitle.  The title for a JCAxis -->
<!ELEMENT axis-title (chart-interior-region?)>

     <!ATTLIST axis-title placement (North|Northeast|Northwest|East|West|
                                     South|Southeast|Southwest) #IMPLIED
                          text CDATA #IMPLIED
                          rotation (None|Rotate_90|Rotate_180|Rotate_270) #IMPLIED
                          adjust (Left|Center|Right) #IMPLIED>

<!-- JCAxisFormula.  Defines a relationship between two axes.  The originator
     attribute needs to match an existing axis name of the same axis type.  If
	 no match occurs, "xaxis" or "yaxis" is used. -->
<!ELEMENT axis-formula EMPTY>

     <!ATTLIST axis-formula multiplier CDATA #IMPLIED
                            constant CDATA #IMPLIED
                            originator CDATA #IMPLIED>

<!-- JCValueLabel.  A value and label to be placed on an axis. -->
<!ELEMENT value-label (#PCDATA)>

     <!ATTLIST value-label value CDATA #REQUIRED>

<!-- JCAnno.  Defines a series of tick marks on an axis -->
<!ELEMENT anno EMPTY>

     <!ATTLIST anno type (Default_Labels|Default_Ticks|
                          User_Defined) "User_Defined"
                    startValue CDATA #IMPLIED
                    stopValue CDATA #IMPLIED
                    incrementValue CDATA #IMPLIED
                    precision CDATA #IMPLIED
                    drawLabels (True|true|TRUE|False|false|FALSE) #IMPLIED
                    drawTicks (True|true|TRUE|False|false|FALSE) #IMPLIED
                    labelExtent CDATA #IMPLIED
                    innerExtent CDATA #IMPLIED
                    outerExtent CDATA #IMPLIED
                    tickColor CDATA #IMPLIED
                    labelColor CDATA #IMPLIED>

<!-- ChartGrid.  Defines a series of grid lines on an axis. -->
<!ELEMENT grid (line-style?)>

     <!ATTLIST grid startValue CDATA #IMPLIED
                    stopValue CDATA #IMPLIED
                    incrementValue CDATA #IMPLIED>

<!-- ChartDataView.  Contains a representation of chartable data and attributes
     used to draw this data, like per series drawing information, chart type,
	 and various chart type specific properties -->
<!ELEMENT chart-data-view ((chart-data|chart-data-file|JCChartData)?,image-map-info?,
                           area-format?,bar-format?,candle-format?,
                           hi-lo-open-close-format?,pie-format?,polar-radar-format?,
                           line-style?,point-label*,threshold*,marker*,
                           chart-data-view-series*)>

     <!ATTLIST chart-data-view name CDATA #REQUIRED
							   xaxis CDATA #IMPLIED
							   yaxis CDATA #IMPLIED
	                           chartType (Plot|Scatter_Plot|Area|Stacking_Area|Bar|
                                          Stacking_Bar|Pie|Hi_Lo|Hi_Lo_Open_Close|Candle|
                                          Polar|Radar|Area_Radar) "Plot"
                               inverted (True|true|TRUE|False|false|FALSE) #IMPLIED
                               visible (True|true|TRUE|False|false|FALSE) #IMPLIED
                               visibleInLegend (True|true|TRUE|False|false|FALSE) #IMPLIED
                               autoLabel (True|true|TRUE|False|false|FALSE) #IMPLIED
                               bufferPlotData (True|true|TRUE|False|false|FALSE) #IMPLIED
                               fastUpdate (True|true|TRUE|False|false|FALSE) #IMPLIED
                               drawFrontPlane (True|true|TRUE|False|false|FALSE) #IMPLIED
                               holeValue CDATA #IMPLIED>

<!-- Data from an external source. File, URL, Servlet -->
<!ELEMENT chart-data-file EMPTY>

     <!ATTLIST chart-data-file fileName CDATA #REQUIRED
                               fileAccess (Default|Absolute|Resolving_Class|Url|
                                           Relative_Url|Servlet) "Default"
                               fileType (Text|Xml) "Xml"
                               fileCharset CDATA #IMPLIED>

<!-- Properties specific to area charts -->
<!ELEMENT area-format EMPTY>

     <!ATTLIST area-format percent100 (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- Properties specific to bar and stacking bar charts -->
<!ELEMENT bar-format EMPTY>

     <!ATTLIST bar-format percent100 (True|true|TRUE|False|false|FALSE) #IMPLIED
                          clusterWidth CDATA #IMPLIED
                          clusterOverlap CDATA #IMPLIED>

<!-- Properties specific to candle charts -->
<!ELEMENT candle-format EMPTY>

     <!ATTLIST candle-format complex (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- Properties specific to HiLoOpenClose charts. Note that showingClosed should
     not be used.  Use showingClose instead.  It is there for backwards
     compatibility only. -->
<!ELEMENT hi-lo-open-close-format EMPTY>

     <!ATTLIST hi-lo-open-close-format showingOpen (True|true|TRUE|False|false|FALSE) #IMPLIED
                                       showingClose (True|true|TRUE|False|false|FALSE) #IMPLIED
                                       showingClosed (True|true|TRUE|False|false|FALSE) #IMPLIED
                                       openCloseFullWidth (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- Properties specific to pie charts:
     fill-style                 - fill color, pattern for pie slices
     explode-list               - A list a (series,point) pairs that define
                                  which pie slices are exploded.
     other-slice-image-map-info - a list of image-map-info objects for the
                                  other slice (one per point).
     image-map-info             - image map URL and extra information for the
                                  other slice in the legend. -->
<!ELEMENT pie-format (fill-style?,other-slice-image-map-info-list?,
                      image-map-info?,explode-list?)>

     <!ATTLIST pie-format minSlices CDATA #IMPLIED
                          explodeOffset CDATA #IMPLIED
                          thresholdMethod (Slice_Cutoff|Percentile) #IMPLIED
                          thresholdValue CDATA #IMPLIED
                          sortOrder (Data_Order|Ascending|Descending) #IMPLIED
                          startAngle CDATA #IMPLIED
                          otherLabel CDATA #IMPLIED>

<!-- A list of (series,point) pairs that represent which slices on a pie
     have been exploded. -->
<!ELEMENT explode-list (series-point+)>

<!-- Represents a series and point.
     series - the series index.  Can be "All" for all series or "Other_Slice"
              for the other slice if this element is used within the context of
              pie charts.
     point  - the point index.  Can be "All" for all points. -->
<!ELEMENT series-point EMPTY>

     <!ATTLIST series-point series CDATA #REQUIRED
                            point CDATA #REQUIRED>

<!-- A list of image-map-info objects that give URL and extra information for
     the other slice, one for each data point. -->
<!ELEMENT other-slice-image-map-info-list (image-map-info+)>

<!-- Properties specific to radar and polar charts. -->
<!ELEMENT polar-radar-format EMPTY>

     <!ATTLIST polar-radar-format yAxisAngle CDATA #IMPLIED
                                  originBase CDATA #IMPLIED
                                  radarCircularGrid (True|true|TRUE|False|false|FALSE) #IMPLIED
                                  halfRange (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- Labels specified on a per point basis for the data.  This specification
     overrides any point labels specified in the data. -->
<!ELEMENT point-label (#PCDATA)>

<!-- JCThreshold.  Defines a threshold region for the background of the chart. -->
<!ELEMENT threshold (fill-style?,start-line-style?,end-line-style?,legend-image-map-info?)>

     <!ATTLIST threshold label CDATA #IMPLIED
                         startValue CDATA #IMPLIED
                         endValue CDATA #IMPLIED
                         associatedWithYAxis (True|true|TRUE|False|false|FALSE) #IMPLIED
                         includedInDataBounds (True|true|TRUE|False|false|FALSE) #IMPLIED
                         visibleInLegend (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- Start line style for a threshold -->
<!ELEMENT start-line-style (line-style)>

<!-- End line style for a threshold -->
<!ELEMENT end-line-style (line-style)>

<!-- JCMarker.  A marker line on a chart. -->
<!ELEMENT marker (line-style?,chart-label?,legend-image-map-info?)>

     <!ATTLIST marker label CDATA #IMPLIED
                      value CDATA #IMPLIED
                      startPoint CDATA #IMPLIED
                      endPoint CDATA #IMPLIED
                      associatedWithYAxis (True|true|TRUE|False|false|FALSE) #IMPLIED
                      includedInDataBounds (True|true|TRUE|False|false|FALSE) #IMPLIED
                      drawnBeforeData (True|true|TRUE|False|false|FALSE) #IMPLIED
                      visibleInLegend (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- Image from an external source. File, URL, Servlet. -->
<!ELEMENT image-file EMPTY>

     <!ATTLIST image-file fileName CDATA #REQUIRED
                          fileAccess (Default|Absolute|Resolving_Class|Url|
                                      Relative_Url|Servlet) "Default">

<!-- ChartDataViewSeries.  Information on how and what to draw for a specific
     data series -->
<!ELEMENT chart-data-view-series (chart-style?,hole-style?)>

     <!ATTLIST chart-data-view-series name CDATA #IMPLIED
                                      visible (True|true|TRUE|False|false|FALSE) #IMPLIED
                                      visibleInLegend (True|true|TRUE|False|false|FALSE) #IMPLIED
                                      included (True|true|TRUE|False|false|FALSE) #IMPLIED
                                      firstPoint CDATA #IMPLIED
                                      lastPoint CDATA #IMPLIED
                                      label CDATA #IMPLIED>

<!-- JCChartStyle.  Drawing specific properties of a series.  Depending on the
     chart type, different aspects of the JCLineStyle, JCFillStyle, and
	 JCSymbolStyle are used. -->
<!ELEMENT chart-style (line-style?,fill-style?,symbol-style?)>

<!-- Hole style - which is a chart style used to draw holes -->
<!ELEMENT hole-style (line-style?,fill-style?,symbol-style?)>

<!-- JCLineStyle.  Line specific drawing properties. -->
<!ELEMENT line-style EMPTY>

     <!ATTLIST line-style pattern (None|Solid|Long_Dash|Short_Dash|LSL_Dash|Dash_Dot) "Solid"
                          color CDATA #IMPLIED
                          width CDATA #IMPLIED
                          join (Miter|Bevel|Round) #IMPLIED
                          cap (Butt|Round|Squared) #IMPLIED>

<!-- JCFillStyle.  Fill specific drawing properties.  Note that the image
     attribute is no longer used, but remains for backwards compatibility. -->
<!ELEMENT fill-style (image-file)?>

     <!ATTLIST fill-style pattern (None|Solid|Per_25|Per_50|Per_75|Horiz_Stripe|
	                               Vert_Stripe|Stripe_45|Stripe_135|Diag_Hatched|
								   Cross_Hatched|Custom_Fill|Custom_Stacked) "Solid"
                          color CDATA #IMPLIED
                          image CDATA #IMPLIED
                          background CDATA #IMPLIED>

<!-- JCSymbolStyle.  Symbol specific drawing properties. -->
<!ELEMENT symbol-style EMPTY>

     <!ATTLIST symbol-style shape (None|Dot|Box|Triangle|Diamond|Star|Vert_Line|
                                   Horiz_Line|Cross|Circle|Square) "None"
                            color CDATA #IMPLIED
                            size CDATA #IMPLIED>

<!-- JCChartLabel.  A floating label that is attached somewhere to the chart.
     Note that if the dataView property is missing or does not match the name
	 property of an existing ChartDataView element, it is assumed that the
	 chart label is associated with the first (or primary) ChartDataView. -->
<!ELEMENT chart-label (label?,offset?,coord?,data-coord?,data-index?)>

     <!ATTLIST chart-label dataView CDATA #IMPLIED
                           anchor (North|South|East|West|Northeast|Northwest|
                                   Southeast|Southwest|Center|Auto) #IMPLIED
                           attachMethod (None|Coord|Data_Coord|Data_Index) #IMPLIED
                           connected (True|true|TRUE|False|false|FALSE) #IMPLIED
                           dwellLabel (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- The label component of the chart label (a JLabel) -->
<!ELEMENT label (component?)>

     <!ATTLIST label text CDATA #IMPLIED
                     horizontalAlignment (Left|Center|Right|Leading|Trailing) "Leading"
                     verticalAlignment (Top|Center|Bottom) "Center">

<!-- The offset from where the label is attached to the chart to where the
     label is drawn -->
<!ELEMENT offset EMPTY>

     <!ATTLIST offset x CDATA #REQUIRED
                      y CDATA #REQUIRED>

<!-- If the attachMethod is Coord, this is the chart coordinate (in pixels)
     to which the label is attached. -->
<!ELEMENT coord EMPTY>

     <!ATTLIST coord x CDATA #REQUIRED
                     y CDATA #REQUIRED>

<!-- If the attachMethod is DataCoord, this is the coordinate in data space
     to which the label is attached. -->
<!ELEMENT data-coord EMPTY>

     <!ATTLIST data-coord x CDATA #REQUIRED
                          y CDATA #REQUIRED>

<!-- If the attachMethod is DataIndex, this gives the view, series and point.
     dataView - is the name of the data view, this should match an existing
                dataView name.  If missing or no match is found, the first
                or primary dataview is assumed.
     series - is the series index within the data view, starting at zero.
              If it is the series representing a pie chart other slice, the
              value should be "Other_Slice".
     point - is the point number within the series, starting at zero. -->
<!ELEMENT data-index EMPTY>

    <!ATTLIST data-index dataView CDATA #IMPLIED
                         point CDATA #REQUIRED
                         series CDATA #REQUIRED>

<!-- A list of data image map rules. -->
<!ELEMENT data-image-map-list (data-image-map*)>

<!-- Data image map specification.  The will define a data ImageMapRules
     object that will be stored in the chart.
     dataView - is the name of the data view to which the image map is
                restricted, this should match an existing dataView name.  If
                missing or no match is found, all dataviews are implied.
     series-point - allows specification of specific series and points within a
                    dataView.  If missing, all series and points are used. -->
<!ELEMENT data-image-map (series-point?)>

    <!ATTLIST data-image-map mapType (Point|Cluster|Series) "Point"
                             mapMethod (Default|Area_Forward|Area_Center) "Default"
                             plotRadius CDATA #IMPLIED
                             dataView CDATA #IMPLIED>

<!-- Legend image map specification.  The will define a legend ImageMapRules
     object that will be stored in the chart.
     dataView - is the name of the data view to which the image map is
                restricted, this should match an existing dataView name.  If
                missing or no match is found, all dataviews are implied.
     series-point - allows specification of specific series within a
                    dataView.  If missing, all series are used. Note that the
                    point field is unused.
     none - if true, no legend image map is attempted. -->
<!ELEMENT legend-image-map (series-point?)>

    <!ATTLIST legend-image-map dataView CDATA #IMPLIED
                               none (True|true|TRUE|False|false|FALSE) #IMPLIED>

<!-- Image map info.  Image map URL and extra information. -->
<!ELEMENT image-map-info EMPTY>

    <!ATTLIST image-map-info url CDATA #IMPLIED
                             extra CDATA #IMPLIED>

<!-- Image map info for the legend.  Image map URL and extra information. -->
<!ELEMENT legend-image-map-info EMPTY>

    <!ATTLIST legend-image-map-info url CDATA #IMPLIED
                                    extra CDATA #IMPLIED>

<!-- external-java-code will permit the user to callback a java
     class after all other xml properties have been read and set.
     The body of the tag may include a String that will be passed
	 to the user's code in the parameter "userData".  For example:
         <external-java-code class="Foo">
         cars, 2, 5
         </external-java-code>
     will call a class (Foo.class) which implements the
     com.klg.jclass.schart.property.xml.ExternalCodeHandler interface.

     The ExternalCodeHandler interface has one method:
     void handle(JCServerChart chart, String userData, Object userObject).
     "chart" is the current instance of JClass ServerChart that
     is being created with xml.  "userData" is the string specified in
     body of the tag.  Onus is on the user to parse the String as needed.
     "userObject" is an object that has been set on the LoadProperties
     class specified in one of the JCServerChartFactory create or
     update methods. -->
<!ELEMENT external-java-code (#PCDATA)>

     <!ATTLIST external-java-code class CDATA #REQUIRED>
